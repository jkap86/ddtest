[{"/Users/dev/react/DynastyDashboard2/client/src/index.js":"1","/Users/dev/react/DynastyDashboard2/client/src/App.js":"2","/Users/dev/react/DynastyDashboard2/client/src/reportWebVitals.js":"3","/Users/dev/react/DynastyDashboard2/client/src/components/homepage.js":"4","/Users/dev/react/DynastyDashboard2/client/src/components/view.js":"5","/Users/dev/react/DynastyDashboard2/client/src/components/playerInfo.js":"6","/Users/dev/react/DynastyDashboard2/client/src/components/leagues.js":"7","/Users/dev/react/DynastyDashboard2/client/src/components/league.js":"8","/Users/dev/react/DynastyDashboard2/client/src/components/roster.js":"9","/Users/dev/react/DynastyDashboard2/client/src/components/playerShares.js":"10","/Users/dev/react/DynastyDashboard2/client/src/components/leaguemates.js":"11","/Users/dev/react/DynastyDashboard2/client/src/components/searchPlayer.js":"12","/Users/dev/react/DynastyDashboard2/client/src/components/searchLeaguemate.js":"13","/Users/dev/react/DynastyDashboard2/client/src/components/sliderToggle.js":"14","/Users/dev/react/ddtest/client/src/index.js":"15","/Users/dev/react/ddtest/client/src/App.js":"16","/Users/dev/react/ddtest/client/src/reportWebVitals.js":"17","/Users/dev/react/ddtest/client/src/components/homepage.js":"18","/Users/dev/react/ddtest/client/src/components/view.js":"19","/Users/dev/react/ddtest/client/src/components/leagues.js":"20","/Users/dev/react/ddtest/client/src/components/playerInfo.js":"21","/Users/dev/react/ddtest/client/src/components/playerShares.js":"22","/Users/dev/react/ddtest/client/src/components/sliderToggle.js":"23","/Users/dev/react/ddtest/client/src/components/leaguemates.js":"24","/Users/dev/react/ddtest/client/src/components/league.js":"25","/Users/dev/react/ddtest/client/src/components/roster.js":"26","/Users/dev/react/ddtest/client/src/components/searchLeaguemate.js":"27","/Users/dev/react/ddtest/client/src/components/searchPlayer.js":"28"},{"size":490,"mtime":1653607976383,"results":"29","hashOfConfig":"30"},{"size":452,"mtime":1653410754030,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":1653407455967,"results":"32","hashOfConfig":"30"},{"size":1208,"mtime":1653666642271,"results":"33","hashOfConfig":"30"},{"size":7204,"mtime":1653761833376,"results":"34","hashOfConfig":"30"},{"size":10322,"mtime":1653851204710,"results":"35","hashOfConfig":"30"},{"size":4139,"mtime":1653670283597,"results":"36","hashOfConfig":"30"},{"size":7247,"mtime":1653669995358,"results":"37","hashOfConfig":"30"},{"size":22649,"mtime":1653838896206,"results":"38","hashOfConfig":"30"},{"size":26777,"mtime":1653838085932,"results":"39","hashOfConfig":"30"},{"size":14811,"mtime":1653686068818,"results":"40","hashOfConfig":"30"},{"size":1861,"mtime":1653335620594,"results":"41","hashOfConfig":"30"},{"size":1298,"mtime":1647366871194,"results":"42","hashOfConfig":"30"},{"size":677,"mtime":1653700367385,"results":"43","hashOfConfig":"30"},{"size":490,"mtime":1654011276384,"results":"44","hashOfConfig":"45"},{"size":452,"mtime":1654011276380,"results":"46","hashOfConfig":"45"},{"size":362,"mtime":1654011276385,"results":"47","hashOfConfig":"45"},{"size":1208,"mtime":1654011276380,"results":"48","hashOfConfig":"45"},{"size":7204,"mtime":1654011276383,"results":"49","hashOfConfig":"45"},{"size":4139,"mtime":1654011276381,"results":"50","hashOfConfig":"45"},{"size":10322,"mtime":1654011276381,"results":"51","hashOfConfig":"45"},{"size":27446,"mtime":1654013209913,"results":"52","hashOfConfig":"45"},{"size":677,"mtime":1654011276383,"results":"53","hashOfConfig":"45"},{"size":14811,"mtime":1654011276381,"results":"54","hashOfConfig":"45"},{"size":7247,"mtime":1654011276380,"results":"55","hashOfConfig":"45"},{"size":22649,"mtime":1654011276382,"results":"56","hashOfConfig":"45"},{"size":1298,"mtime":1654011276382,"results":"57","hashOfConfig":"45"},{"size":1861,"mtime":1654011276383,"results":"58","hashOfConfig":"45"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1y3r4pz",{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c0zdzr",{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/dev/react/DynastyDashboard2/client/src/index.js",[],[],[],"/Users/dev/react/DynastyDashboard2/client/src/App.js",[],[],"/Users/dev/react/DynastyDashboard2/client/src/reportWebVitals.js",[],[],"/Users/dev/react/DynastyDashboard2/client/src/components/homepage.js",["154"],[],"import { useState, useEffect } from \"react\";\nimport { Link } from 'react-router-dom'\nimport axios from 'axios';\nimport { motion } from 'framer-motion';\n\nconst Homepage = () => {\n    const [username, setUsername] = useState('')\n\n    const getUser = async (e) => {\n        const user = await axios.get('/user', {\n            params: {\n                username: e.target.value\n            }\n        })\n        if (typeof (user.data) === 'object') {\n            setUsername(e.target.value)\n        } else {\n            setUsername('')\n        }\n    }\n\n    return <>\n        <motion.h1\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 5 }}\n        >\n            Dynasty Dashboard\n        </motion.h1>\n        <br /><br />\n        <div className=\"search_wrapper\">\n            <input \n                type=\"text\"\n                placeholder=\"username\"\n                onChange={getUser}\n            />\n            <br /><br />\n            {username === '' ? null : \n                <Link to={`/${username}`}>\n                    <button type=\"submit\">Submit</button>\n                </Link>\n            }\n        </div>\n    </>\n}\nexport default Homepage;","/Users/dev/react/DynastyDashboard2/client/src/components/view.js",["155","156","157","158","159"],[],"import React, { useState, useEffect, Suspense } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport PlayerInfo from './playerInfo';\nimport Leagues from './leagues';\nimport PlayerShares from './playerShares';\nimport Leaguemates from './leaguemates';\nimport { motion } from 'framer-motion';\nimport SliderToggle from './sliderToggle';\n\nconst View = () => {\n    const params = useParams()\n    const [activeTab, setActiveTab] = useState('Leagues')\n    const [user, setUser] = useState({})\n    const [allPlayers, setAllPlayers] = useState({})\n    const [playerInfo, setPlayerInfo] = useState([])\n    const [leagues, setLeagues] = useState([])\n    const [filters, setFilters] = useState({ 'r_d': 'All', 'b_s': 'All' })\n\n\n    const getSelection = async (data) => {\n        console.log(data)\n        const key = Object.keys(data)[0]\n        let f = { ...filters, [key]: data[key] }\n        setFilters(f)\n        let l = leagues\n        l.map(league => {\n            league.isLeagueHidden = true;\n            if (f.rd === 'All' && f.b_s === 'All') {\n                league.isLeagueHidden = false\n            } else if ((f.r_d === league.dynasty || f.r_d === 'All') && (f.b_s === league.bestball || f.b_s === 'All')) {\n                league.isLeagueHidden = false\n            }\n        })\n        setLeagues([...l])\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const getUser = async () => {\n                const u = await axios.get('/user', {\n                    params: {\n                        username: params.username\n                    }\n                })\n                setUser(u.data)\n            }\n            getUser()\n            const getAllPlayers = async () => {\n                const ap = await axios.get('/allplayers')\n                const a = Object.keys(ap.data).map(player => {\n                    ap.data[player].type = ap.data[player].years_exp > 0 ? 'V' : 'R'\n                })\n                console.log(ap.data)\n                setAllPlayers(ap.data)\n            }\n\n            const getLeagues = async () => {\n                const l = await axios.get('/leagues', {\n                    params: {\n                        username: params.username\n                    }\n                })\n                setLeagues(l.data)\n            }\n            await Promise.all([\n                await getAllPlayers(),\n                await getLeagues()\n            ])\n        }\n        fetchData()\n    }, [params.username])\n\n    const getValue = (player) => {\n        if (parseInt(player) === 0) {\n            return 0\n        } else {\n            if (playerInfo.find(x => parseInt(x.id) === parseInt(player))) {\n                return parseInt(playerInfo.find(x => parseInt(x.id) === parseInt(player)).updated_value)\n            } else {\n                return 0\n            }\n        }\n    }\n    const matchPick = (season, round, order) => {\n        let value;\n        console.log(playerInfo)\n        if (order <= (1 / 3)) {\n            value = playerInfo.filter(x => typeof (x.id) === 'string').find(x => `${season}early${round}` === x.id.slice(0, 10))\n        } else if (order >= (2 / 3)) {\n            value = playerInfo.filter(x => typeof (x.id) === 'string').find(x => `${season}late${round}` === x.id.slice(0, 9))\n        } else {\n            value = playerInfo.filter(x => typeof (x.id) === 'string').find(x => `${season}mid${round}` === x.id.slice(0, 8))\n        }\n        value = value === undefined ? 0 : value.updated_value\n        return value\n    }\n    const getProjection = (player) => {\n        if (parseInt(player) === 0) {\n            return 0\n        } else {\n            if (playerInfo.find(x => parseInt(x.id) === parseInt(player))) {\n                return parseFloat(playerInfo.find(x => parseInt(x.id) === parseInt(player)).updated_fpts)\n            } else {\n                return 0\n            }\n        }\n    }\n    return <>\n        <Link className='link' to=\"/\">Home</Link>\n        <button\n            onClick={() => setActiveTab('All Players')}\n            className={activeTab === 'All Players' ? 'navbutton active clickable' : 'navbutton clickable'}\n        >\n            All Players\n        </button>\n        <h1>\n            Dynasty Dashboard\n        </h1>\n        <motion.h2\n            animate={{ rotateY: 360 }}\n            transition={{ repeat: Infinity, duration: 15 }}\n        >\n            {user.display_name}\n        </motion.h2>\n        <div className=\"navcontainer\">\n            <button onClick={() => setActiveTab('Leagues')} className={activeTab === 'Leagues' ? 'active nav clickable' : 'nav clickable'}>Leagues</button>\n            <button onClick={() => setActiveTab('Players')} className={activeTab === 'Players' ? 'active nav clickable' : 'nav clickable'}>Players</button>\n            <button onClick={() => setActiveTab('Leaguemates')} className={activeTab === 'Leaguemates' ? 'active nav clickable' : 'nav'}>Leaguemates</button>\n        </div>\n        <div className='slidercontainer'>\n            <SliderToggle sendSelection={getSelection} className=\"slidertoggle\" sendSelection={getSelection} name=\"r_d\" names={['Redraft', 'All', 'Dynasty']} active=\"All\" />\n            <SliderToggle sendSelection={getSelection} className=\"slidertoggle\" sendSelection={getSelection} name=\"b_s\" names={['BestBall', 'All', 'Standard']} active=\"All\" />\n        </div>\n\n        <div hidden={activeTab === 'All Players' ? false : true}>\n            <Suspense fallback={<h1>Loading...</h1>}>\n                <PlayerInfo\n                    sendPlayers={(data) => setPlayerInfo(data)}\n                    allPlayers={allPlayers}\n                />\n            </Suspense>\n        </div>\n\n        <div hidden={activeTab === 'Leagues' ? false : true}>\n            {leagues.length > 0 ?\n                <Leagues\n                    leagues={leagues.filter(x => x.isLeagueHidden === false)}\n                    allPlayers={allPlayers}\n                    getValue={getValue}\n                    matchPick={matchPick}\n                    getProjection={getProjection}\n                />\n                : <h1>Loading...</h1>\n            }\n        </div>\n        <div hidden={activeTab === 'Players' ? false : true}>\n            {leagues.length > 0 ?\n                <PlayerShares\n                    allPlayers={allPlayers}\n                    leagues={leagues.filter(x => x.isLeagueHidden === false)}\n                    user={user}\n                    getValue={getValue}\n                    getProjection={getProjection}\n                    matchPick={matchPick}\n                />\n                : <h1>Loading...</h1>\n            }\n        </div>\n        <div hidden={activeTab === 'Leaguemates' ? false : true}>\n            {leagues.length > 0 ?\n                <Leaguemates\n                    allPlayers={allPlayers}\n                    leagues={leagues.filter(x => x.isLeagueHidden === false)}\n                    user={user}\n                    getValue={getValue}\n                    getProjection={getProjection}\n                    matchPick={matchPick}\n                />\n                : <h1>Loading...</h1>\n            }\n        </div>\n    </>\n}\nexport default View;","/Users/dev/react/DynastyDashboard2/client/src/components/playerInfo.js",["160","161","162","163","164","165"],[],"import axios from \"axios\";\nimport { read, utils } from 'xlsx';\nimport React, { useState, useEffect } from \"react\";\nimport player_default from '../player_default.png';\nimport { motion } from 'framer-motion';\n\nconst PlayerInfo = (props) => {\n    const [sortBy, setSortBy] = useState('value')\n    const [sortToggle, setSortToggle] = useState(false)\n    const [file, setFile] = useState(null)\n    const [allPlayers, setAllPlayers] = useState({})\n    const [players, setPlayers] = useState([])\n    const [playersDisplay, setPlayersDisplay] = useState([])\n    const [filters, setFilters] = useState({\n        positions: [],\n        types: []\n    })\n\n    const filterPosition = (e) => {\n        let f = filters.positions\n        if (e.target.checked) {\n            const index = f.indexOf(e.target.name)\n            f.splice(index, 1)\n        } else {\n            f.push(e.target.name)\n        }\n        setFilters({ ...filters, positions: f })\n    }\n    const filterYearsExp = (e) => {\n        let f = filters.types\n        if (e.target.checked) {\n            const index = f.indexOf(e.target.name)\n            f.splice(index, 1)\n        } else {\n            f.push(e.target.name)\n        }\n        setFilters({ ...filters, types: f })\n    }\n\n    const sortPlayer = (key) => {\n        let t = sortToggle\n        let s = sortBy\n        const toggle = !t\n        if (key === s) {\n            setSortToggle(toggle)\n        } else {\n            setSortBy(key)\n        }\n        let pd;\n        let p = players\n        if (toggle) {\n            pd = p.sort((a, b) => b[key] > a[key] ? 1 : -1)\n        } else {\n            pd = p.sort((a, b) => b[key] < a[key] ? 1 : -1)\n        }\n        setPlayersDisplay(pd)\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const p = await axios.get('/playerinfo')\n            p.data.map(player => {\n                if (player.fpts === undefined) {\n                    player.fpts = 0\n                    player.updateFpts = 0\n                }\n            })\n            setPlayers(p.data)\n            setPlayersDisplay(p.data)\n            setAllPlayers(props.allPlayers)\n            props.sendPlayers(p.data)\n            setPlayersDisplay(p.data.sort((a, b) => b[sortBy] > a[sortBy] ? 1 : -1))\n            console.log(p.data)\n        }\n        fetchData()\n\n    }, [props.allPlayers])\n\n    const updateValue = (player_id, updated_value) => {\n        const p = playersDisplay\n        p.filter(x => x.id === player_id).map(player => {\n            player.updated_value = updated_value\n        })\n        setPlayersDisplay([...p])\n        props.sendPlayers([...p])\n    }\n    const updateFpts = (player_id, updated_value) => {\n        const p = playersDisplay\n        p.filter(x => x.id === player_id).map(player => {\n            player.updated_fpts = updated_value\n        })\n        setPlayersDisplay([...p])\n        props.sendPlayers([...p])\n    }\n\n    const readFile = (e) => {\n        if (e.target.files) {\n            const reader = new FileReader()\n            reader.onload = (e) => {\n                const data = e.target.result\n                const workbook = read(data, { type: \"array\" })\n                const sheetName = workbook.SheetNames[0]\n                const worksheet = workbook.Sheets[sheetName]\n                let json = utils.sheet_to_json(worksheet)\n                let max_dv = Math.max(...json.map(player => player.value))\n                let min_dv = Math.min(...json.map(player => player.value))\n                json.map(player => {\n                    const searchName = player.name.replace(/[^0-9a-z]/gi, '').toLowerCase().trim()\n                    const value = parseInt((player.value - min_dv) / (max_dv - min_dv) * 10000)\n                    const id = Object.keys(allPlayers).find(x => allPlayers[x].position === player.position &&\n                        (allPlayers[x].search_full_name === searchName ||\n                            (allPlayers[x].search_full_name.slice(-5, -1) === searchName.slice(-5, -1) &&\n                                allPlayers[x].search_full_name.slice(0, 3) === searchName.slice(0, 3)\n                            )\n                        )\n\n                    )\n                    player.id = id\n                    player.value = value === undefined ? 0 : value\n                    player.updated_value = value === undefined ? 0 : value\n                    player.fpts = player.fpts\n                    player.updated_fpts = player.fpts\n                })\n                setPlayersDisplay(json)\n                props.sendPlayers(json)\n            }\n            setFile(e.target.files[0].name)\n            reader.readAsArrayBuffer(e.target.files[0])\n        } else {\n            setFile(null)\n        }\n\n    }\n    const clearFile = () => {\n        setFile(null)\n        let f = document.getElementById(\"fileupload\")\n        f.value = null\n        let p = players\n        setPlayersDisplay(p)\n    }\n\n    return <>\n        <table className=\"main\">\n            <caption>\n                {file === null ? \n                <button className=\"file\">\n                    <label for=\"fileupload\" className='file clickable'>\n                        Upload File\n                        <input\n                            id='fileupload'\n                            className=\"fileupload\"\n                            type='file'\n                            onChange={readFile}\n                        />\n                    </label>\n                </button>\n                :\n                <button className=\"clear clickable\" onClick={() => clearFile()}>Clear</button>\n}\n                <h3>{file}</h3>\n                <div className=\"checkboxes\">\n                    <label className=\"script\">\n                        QB\n                        <input className=\"clickable\" name=\"QB\" onClick={filterPosition} defaultChecked type=\"checkbox\" />\n                    </label>\n                    <label className=\"script\">\n                        RB\n                        <input className=\"clickable\" name=\"RB\" onChange={filterPosition} defaultChecked type=\"checkbox\" />\n                    </label>\n                    <label className=\"script\">\n                        WR\n                        <input className=\"clickable\" name=\"WR\" onChange={filterPosition} defaultChecked type=\"checkbox\" />\n                    </label>\n                    <label className=\"script\">\n                        TE\n                        <input className=\"clickable\" name=\"TE\" onChange={filterPosition} defaultChecked type=\"checkbox\" />\n                    </label>\n                    <label className=\"script\">\n                        Picks\n                        <input className=\"clickable\" name=\"PI\" onChange={filterPosition} defaultChecked type=\"checkbox\" />\n                    </label>\n                    <br />\n                    <label className='script'>\n                        Vets\n                        <input className=\"clickable\" name='V' onChange={(e) => filterYearsExp(e, 'Vets')} defaultChecked type=\"checkbox\" />\n                    </label>\n                    <label className='script'>\n                        Rookies\n                        <input className=\"clickable\" name='R' onChange={(e) => filterYearsExp(e, 'Rookies')} defaultChecked type=\"checkbox\" />\n                    </label>\n                </div>\n            </caption>\n            <tbody>\n                <tr>\n                    <th colSpan={4} className=\"clickable\" onClick={() => sortPlayer('name')}>Player</th>\n                    <th>Position</th>\n                    <th>Team</th>\n                    <th className=\"clickable\" onClick={() => sortPlayer('value')}>KTC Value</th>\n                    <th className=\"clickable\" onClick={() => sortPlayer('updated_value')}>User Value</th>\n                    <th className=\"clickable\" onClick={() => sortPlayer('fpts')}>FP Projection</th>\n                    <th className=\"clickable\" onClick={() => sortPlayer('updated_fpts')}>User Projection</th>\n                </tr>\n                {playersDisplay.filter(x => !filters.types.includes(x.type) && !filters.positions.includes(x.position)).map((player, index) =>\n                    <tr key={index}>\n                        <td>\n                            <motion.img\n                                animate={{ rotate: 360 }}\n                                transition={{ repeat: Infinity, duration: Math.random() * 10 + 2 }}\n                                className=\"thumbnail\"\n                                alt=\"headshot\"\n                                src={`https://sleepercdn.com/content/nfl/players/thumb/${player.id}.jpg`}\n                                onError={(e) => { return e.target.src = player_default }}\n                            />\n                        </td>\n                        <td colSpan={3} className=\"left\">{player.name}</td>\n                        <td>{player.position}</td>\n                        <td>{player.team}</td>\n                        <td>{player.value}</td>\n                        <td>\n                            <input\n                                type=\"text\"\n                                className={parseInt(player.updated_value) === parseInt(player.value) ? 'updated_value' : 'updated_value modified'}\n                                value={player.updated_value}\n                                onChange={(e) => updateValue(player.id, e.target.value)}\n                            />\n                        </td>\n                        {player.position === 'PI' ? null :\n                            <>\n                                <td>{player.fpts}</td>\n                                <td>\n                                    <input\n                                        type=\"text\"\n                                        className={parseFloat(player.updated_fpts) === parseFloat(player.fpts) ? 'updated_value' : 'updated_value modified'}\n                                        value={player.updated_fpts}\n                                        onChange={(e) => updateFpts(player.id, e.target.value)}\n                                    />\n                                </td>\n                            </>\n                        }\n                    </tr>\n                )}\n            </tbody>\n        </table>\n    </>\n}\nexport default PlayerInfo;","/Users/dev/react/DynastyDashboard2/client/src/components/leagues.js",["166"],[],"import React, { useState } from 'react';\nimport emoji from '../emoji.png';\nimport League from './league';\nimport { motion } from 'framer-motion';\n\nconst Leagues = (props) => {\n    const [leagues, setLeagues] = useState([])\n    if (props.leagues !== leagues) setLeagues(props.leagues)\n\n    const showRoster = (league_id) => {\n        let l = leagues;\n        l.filter(x => x.league_id === league_id).map(league => {\n            league.isRosterHidden = !league.isRosterHidden;\n        })\n        setLeagues([...l])\n    }\n\n    let total_wins = leagues.reduce((acc, cur) => acc + cur.wins, 0)\n    let total_losses = leagues.reduce((acc, cur) => acc + cur.losses, 0)\n    let total_ties = leagues.reduce((acc, cur) => acc + cur.ties, 0)\n    let total_fpts = leagues.reduce((acc, cur) => acc + cur.fpts, 0)\n    let total_fpts_against = leagues.reduce((acc, cur) => acc + cur.fpts_against, 0)\n\n    return <>\n        <br />\n        <table className=\"summary\">\n            <tbody>\n                <tr>\n                    <th colSpan=\"2\">{leagues.length} Leagues</th>\n                </tr>\n                <tr>\n                    <td colSpan=\"2\">Record: {total_wins}-{total_losses}{total_ties === 0 ? null : `-${total_ties}`} <em>{total_wins + total_losses === 0 ? '.0000' : (total_wins / (total_wins + total_losses)).toFixed(4)}</em></td>\n                </tr>\n                <tr>\n                    <td colSpan=\"2\">{Number(total_fpts.toFixed(2)).toLocaleString(\"en-US\")} - {Number(total_fpts_against.toFixed(2)).toLocaleString(\"en-US\")}</td>\n                </tr>\n            </tbody>\n        </table>\n        <table className='main'>\n            <tbody>\n                <tr>\n                    <th colSpan={4}>League</th>\n                    <th>Record</th>\n                    <th>Win Pct</th>\n                    <th colSpan={2}>Fantasy Points</th>\n                </tr>\n                {leagues.sort((a, b) => a.index - b.index).map((league, index) =>\n                    <React.Fragment key={index}>\n                        <tr onClick={() => showRoster(league.league_id)} className={league.isRosterHidden ? 'hover clickable' : 'hover clickable active'}>\n                            <td>\n                                <motion.img\n                                    animate={{ rotate: 360 }}\n                                    transition={{ \n                                        repeat: Infinity, \n                                        duration: Math.random() * 10 + 2 \n                                    }}\n                                    alt='avatar'\n                                    className='thumbnail'\n                                    src={league.avatar === null ? emoji : `https://sleepercdn.com/avatars/${league.avatar}`}\n                                />\n                            </td>\n                            <td colSpan={3} className='left'>{league.name}</td>\n                            <td>{league.wins}-{league.losses}{league.ties > 0 ? `-${league.ties}` : null}</td>\n                            <td>{league.wins + league.losses > 0 ? (league.wins / (league.wins + league.losses)).toFixed(4) : '.0000'}</td>\n                            <td colSpan={2}>{Number(league.fpts).toLocaleString(\"en-US\")} - {Number(league.fpts_against).toLocaleString(\"en-US\")}</td>\n                        </tr>\n                        {league.isRosterHidden ? null : \n                            <tr key={index + '_league'}>\n                                <td colSpan={8}>\n                                    <League\n                                        allPlayers={props.allPlayers}\n                                        league={league}\n                                        getValue={props.getValue}\n                                        matchPick={props.matchPick}\n                                        getProjection={props.getProjection}\n                                    />\n                                </td>\n                            </tr>\n                        }\n                    </React.Fragment>\n                )}\n            </tbody>\n        </table>\n    </>\n}\nexport default Leagues;","/Users/dev/react/DynastyDashboard2/client/src/components/league.js",["167"],[],"import React, { useState } from \"react\";\nimport emoji from '../emoji.png';\nimport Roster from \"./roster\";\nimport { motion } from \"framer-motion\";\n\nconst League = (props) => {\n    const [sortBy, setSortBy] = useState('starters_proj')\n    const [allPlayers, setAllPlayers] = useState(props.allPlayers)\n    const [league, setLeague] = useState()\n    if (props.league !== league) setLeague(props.league)\n\n    const showRoster = (roster_id) => {\n        let l = league\n        l.rosters.filter(x => x.roster_id === roster_id).map(roster => {\n            return roster.isRosterHidden = roster.isRosterHidden === undefined ? false : !roster.isRosterHidden\n        })\n        setLeague({...l})\n    }\n\n    let league_display = league === undefined ? undefined :\n        {\n            ...league,\n            rosters: league.rosters.map(roster => {\n                const picks = Object.keys(roster.draft_picks.picks).map(season =>\n                    Object.keys(roster.draft_picks.picks[season]).map(round =>\n                        roster.draft_picks.picks[season][round].picks.map(pick => {\n                            return {\n                                season: season,\n                                round: round,\n                                roster_id: pick\n                            }\n                        })\n                    )\n                )\n                const picks_value = picks.flat(2).reduce((acc, cur) => acc + parseInt(props.matchPick(cur.season, cur.round)), 0)\n                const qb_value = roster.players === null ? 0 : roster.players.filter(x => allPlayers[x].position === 'QB').reduce((acc, cur) => acc + parseInt(props.getValue(cur)), 0)\n                const rb_value = roster.players === null ? 0 : roster.players.filter(x => allPlayers[x].position === 'RB').reduce((acc, cur) => acc + parseInt(props.getValue(cur)), 0)\n                const wr_value = roster.players === null ? 0 : roster.players.filter(x => allPlayers[x].position === 'WR').reduce((acc, cur) => acc + parseInt(props.getValue(cur)), 0)\n                const te_value = roster.players === null ? 0 : roster.players.filter(x => allPlayers[x].position === 'TE').reduce((acc, cur) => acc + parseInt(props.getValue(cur)), 0)\n                const starters_proj = roster.players === null ? 0 : roster.starters.reduce((acc, cur) => acc + parseFloat(props.getProjection(cur)), 0).toFixed(2)\n                return {\n                    ...roster,\n                    starters_proj: starters_proj,\n                    qb_value: qb_value,\n                    rb_value: rb_value,\n                    wr_value: wr_value,\n                    te_value: te_value,\n                    picks_value: picks_value,\n                    roster_value: qb_value + rb_value + wr_value + te_value,\n                    total_value: qb_value + rb_value + wr_value + te_value + picks_value\n                }\n            })\n        }\n\n    return league_display === undefined ? <h1>Loading...</h1> :\n        <>\n            <table className=\"secondary\">\n                <tbody>\n                    <tr>\n                        <th colSpan={4}>Username</th>\n                        <th colSpan={2}>Record</th>\n                        <th colSpan={2} className=\"clickable\" onClick={() => setSortBy('starters_proj')}>Projection</th>\n                        <th colSpan={3} className=\"clickable\" onClick={() => setSortBy('total_value')}>Total Value</th>\n                        <th colSpan={3} className=\"clickable\" onClick={() => setSortBy('roster_value')}>Roster</th>\n                        <th colSpan={3} className=\"clickable\" onClick={() => setSortBy('picks_value')}>Picks</th>\n                        <th colSpan={3}>Breakdown</th>\n                    </tr>\n                    {league_display.rosters.sort((a, b) => b[sortBy] - a[sortBy]).map((roster, index) =>\n                        <React.Fragment key={index}>\n                            <tr onClick={() => showRoster(roster.roster_id)} className={roster.isRosterHidden === undefined || roster.isRosterHidden === true ? \"hover_black clickable\" : \"hover_black clickable active\"}>\n                                <td>\n                                    <motion.img\n                                        animate={{ rotate: 360 }}\n                                        transition={{ \n                                            repeat: Infinity,\n                                            duration: Math.random() * 10 + 3\n                                        }}\n                                        className=\"thumbnail\"\n                                        src={roster.avatar === null ? emoji : `https://sleepercdn.com/avatars/${roster.avatar}`}\n                                    />\n                                </td>\n                                <td colSpan={3}>{roster.username}</td>\n                                <td colSpan={2}>{roster.settings.wins}-{roster.settings.losses}</td>\n                                <td colSpan={2}>{parseFloat(roster.starters_proj).toLocaleString(\"en-US\")}</td>\n                                <td colSpan={3}>{roster.total_value.toLocaleString(\"en-US\")}</td>\n                                <td colSpan={3}>{roster.roster_value.toLocaleString(\"en-US\")}</td>\n                                <td colSpan={3}>{roster.picks_value.toLocaleString(\"en-US\")}</td>\n                                <td colSpan={3}>\n                                    <p>QB: {roster.qb_value.toLocaleString(\"en-US\")}</p>\n                                    <p>RB: {roster.rb_value.toLocaleString(\"en-US\")}</p>\n                                    <p>WR: {roster.wr_value.toLocaleString(\"en-US\")}</p>\n                                    <p>TE: {roster.te_value.toLocaleString(\"en-US\")}</p>\n                                </td>\n                            </tr>\n                            {roster.isRosterHidden === false && roster.players !== null ?\n                                <tr className=\"tertiary\">\n                                    <td colSpan={20}>\n                                        <Roster \n                                            allPlayers={props.allPlayers}\n                                            getProjection={props.getProjection}\n                                            getValue={props.getValue}\n                                            hideSummary={true}\n                                            matchPick={props.matchPick}\n                                            roster={{\n                                                ...roster,\n                                                settings: {\n                                                    taxi_slots: league_display.settings.taxi_slots,\n                                                    reserve_slots: league_display.settings.reserve_slots\n                                                }\n                                            }}\n                                        />\n                                    </td>\n                                </tr>\n                                : null\n                            }\n                        </React.Fragment>\n                    )}\n                </tbody>\n            </table>\n        </>\n}\nexport default League;","/Users/dev/react/DynastyDashboard2/client/src/components/roster.js",["168"],[],"import { useState } from \"react\";\nimport emoji from '../emoji.png';\n\nconst Roster = (props) => {\n    const [allPlayers, setAllPlayers] = useState(props.allPlayers)\n    const [activeTab, setActiveTab] = useState('Lineup')\n    props.roster.taxi = props.roster.taxi === null ? [] : props.roster.taxi\n    props.roster.reserve = props.roster.reserve === null ? [] : props.roster.reserve\n    const picks = Object.keys(props.roster.draft_picks.picks).map(season =>\n        Object.keys(props.roster.draft_picks.picks[season]).map(round =>\n            props.roster.draft_picks.picks[season][round].picks.map(pick => {\n                return {\n                    season: season,\n                    round: round,\n                    order: pick.order,\n                    total_rosters: pick.total_rosters\n                }\n            })\n        )\n    )\n    const roster_value = props.roster === undefined ? 0 : props.roster.players.reduce((acc, cur) => acc + parseInt(props.getValue(cur)), 0)\n    const picks_value = picks.flat(2).reduce((acc, cur) => acc + parseInt(props.matchPick(cur.season, cur.round, (cur.order / cur.total_rosters))), 0)\n\n    return <>\n        <h4 className=\"roster\">{props.roster.username}</h4>\n        {props.hideSummary === true ? null :\n            <div>\n                <p className='header'>Roster Value: {roster_value.toLocaleString(\"en-US\")} </p>\n                <p className='header'>Picks Value: {picks_value.toLocaleString(\"en-US\")}</p>\n                <p className=\"header\">Total: {(parseInt(roster_value) + parseInt(picks_value)).toLocaleString(\"en-US\")}</p>\n            </div>\n        }\n        <button onClick={() => setActiveTab('Lineup')} className={activeTab === 'Lineup' ? 'rostertab active clickable' : 'rostertab clickable'}>Lineup</button>\n        <button onClick={() => setActiveTab('Positions')} className={activeTab === 'Positions' ? 'rostertab active clickable' : 'rostertab clickable'}>Positions</button>\n        {activeTab === 'Lineup' && props.roster !== undefined ?\n            <div>\n                <table className=\"rostercolumn\">\n                    <tbody>\n                        <tr>\n                            <th>Value</th>\n                            <th>Starter</th>\n                            <th>Proj</th>\n                        </tr>\n                        {props.roster.starters.map((player, index) =>\n                            <tr key={index} className=\"roster_player\">\n                                <td className=\"black\">\n                                    <em style={{ filter: `invert(${(props.getValue(player) / 200) + 50}%) brightness(2)` }}>\n                                        {props.getValue(player)}\n                                    </em>\n                                </td>\n                                <td>\n                                    <div className=\"roster_player\">\n                                        {player === '0' ? <img className=\"thumbnail\" alt=\"empty\" src={emoji} /> : <img className=\"thumbnail\" alt=\"player\" src={`https://sleepercdn.com/content/nfl/players/thumb/${player}.jpg`} onError={(e) => { return e.target.src = emoji }} />}\n                                        <p>\n                                            {player === '0' ? <em>empty</em> : allPlayers[player].position + \" \" + allPlayers[player].first_name + \" \" +\n                                                allPlayers[player].last_name} {player === '0' ? null : allPlayers[player].team === null ? 'FA' : allPlayers[player].team}\n                                        </p>\n                                    </div>\n                                </td>\n                                <td className=\"black\">\n                                    <em style={{ filter: `invert(${(props.getProjection(player) * 2) + 50}%) brightness(2)` }}>\n                                        {props.getProjection(player).toFixed(2)}\n                                    </em>\n                                </td>\n                            </tr>\n                        )}\n                    </tbody>\n                </table>\n                <table className=\"rostercolumn\">\n                    <tbody>\n                        <tr>\n                            <th>Value</th>\n                            <th>Bench</th>\n                            <th>Proj</th>\n                        </tr>\n                        {props.roster.players.filter(x => !props.roster.starters.includes(x) &&\n                            !props.roster.taxi.includes(x) && !props.roster.reserve.includes(x)).sort((a, b) =>\n                                parseInt(props.getValue(a)) < parseInt(props.getValue(b)) ? 1 : -1).map((player, index) =>\n                                    <tr key={index} className=\"roster_player\">\n                                        <td className=\"black\">\n                                            <em style={{ filter: `invert(${(props.getValue(player) / 200) + 50}%) brightness(2)` }}>\n                                                {props.getValue(player)}\n                                            </em>\n                                        </td>\n                                        <td>\n                                            <div className=\"roster_player\">\n                                                <img\n                                                    className=\"thumbnail\"\n                                                    alt=\"headshot\"\n                                                    src={`https://sleepercdn.com/content/nfl/players/thumb/${player}.jpg`}\n                                                    onError={(e) => { return e.target.src = emoji }}\n                                                />\n                                                <p>\n                                                    {allPlayers[player].position + \" \" + allPlayers[player].first_name + \" \" +\n                                                        allPlayers[player].last_name}&nbsp;{allPlayers[player].team === null ? 'FA' : allPlayers[player].team}\n                                                </p>\n                                            </div>\n                                        </td>\n                                        <td className=\"black\">\n                                            <em style={{ filter: `invert(${(props.getProjection(player) * 2) + 50}%) brightness(2)` }}>\n                                                {props.getProjection(player).toFixed(2)}\n                                            </em>\n                                        </td>\n                                    </tr>\n                                )}\n                    </tbody>\n                </table>\n                {props.roster.settings.reserve_slots > 0 ?\n                    <table className=\"rostercolumn\">\n                        <tbody>\n                            <tr>\n                                <th>Value</th>\n                                <th>IR</th>\n                                <th>Proj</th>\n                            </tr>\n                            {props.roster.reserve.sort((a, b) => parseInt(props.getValue(b) - parseInt(props.getValue(a)))).map((player, index) =>\n                                <tr key={index} className=\"roster_player\">\n                                    <td className=\"black\">\n                                        <em style={{ filter: `invert(${(props.getValue(player) / 200) + 50}%) brightness(2)` }}>\n                                            {props.getValue(player)}\n                                        </em>\n                                    </td>\n                                    <td>\n                                        <div className=\"roster_player\">\n                                            <img className=\"thumbnail\" alt=\"headshot\" src={`https://sleepercdn.com/content/nfl/players/thumb/${player}.jpg`} onError={(e) => { return e.target.src = emoji }} />\n                                            <p>\n                                                {allPlayers[player].position + \" \" + allPlayers[player].first_name + \" \" + allPlayers[player].last_name}&nbsp;\n                                                {allPlayers[player].team === null ? 'FA' : allPlayers[player].team}:&nbsp;\n                                            </p>\n                                        </div>\n                                    </td>\n                                    <td className=\"black\">\n                                        <em style={{ filter: `invert(${(props.getProjection(player) * 2) + 50}%) brightness(2)` }}>\n                                            {props.getProjection(player).toFixed(2)}\n                                        </em>\n                                    </td>\n\n                                </tr>\n                            )}\n                            {props.roster.settings.reserve_slots - props.roster.reserve.length === 0 ? null :\n                                Array.from(Array(props.roster.settings.reserve_slots - props.roster.reserve.length).keys()).map((empty, index) =>\n                                    <tr key={index}>\n                                        <tr>\n                                            <td colSpan={3}><p><em>empty</em></p></td>\n                                        </tr>\n                                    </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                    : null\n                }\n                {props.roster.settings.taxi_slots > 0 ?\n                    <table className=\"rostercolumn\">\n                        <tbody>\n                            <tr>\n                                <th>Value</th>\n                                <th>Taxi</th>\n                                <th>Proj</th>\n                            </tr>\n                            {props.roster.taxi.sort((a, b) => parseInt(props.getValue(b)) - parseInt(props.getValue(a))).map((player, index) =>\n                                <tr key={index} className=\"roster_player\">\n                                    <td className=\"black\">\n                                        <em className=\"dv\" style={{ filter: `invert(${(props.getValue(player) / 200) + 50}%) brightness(2)` }}>\n                                            {props.getValue(player)}\n                                        </em>\n                                    </td>\n                                    <td>\n                                        <div className=\"roster_player\">\n                                            <img className=\"thumbnail\" alt=\"player\" src={`https://sleepercdn.com/content/nfl/players/thumb/${player}.jpg`} onError={(e) => { return e.target.src = emoji }} />\n                                            <p>\n                                                {allPlayers[player].position + \" \" + allPlayers[player].first_name + \" \" + allPlayers[player].last_name}&nbsp;\n                                                {allPlayers[player].team === null ? 'FA' : allPlayers[player].team}:&nbsp;\n                                            </p>\n                                        </div>\n                                    </td>\n                                    <td className=\"black\">\n                                        <em style={{ filter: `invert(${(props.getProjection(player) * 2) + 50}%) brightness(2)` }}>\n                                            {props.getProjection(player).toFixed(2)}\n                                        </em>\n                                    </td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </table>\n                    : null\n                }\n                <table className=\"rostercolumn\">\n                    <tbody>\n                        <tr>\n                            <th>Draft Picks</th>\n                        </tr>\n                        <tr>\n                            {Object.keys(props.roster.draft_picks.picks).map(season =>\n                                <div className=\"picks_season\">\n                                    {Object.keys(props.roster.draft_picks.picks[season]).map(round =>\n                                        props.roster.draft_picks.picks[season][round].picks.sort((a, b) => a.order - b.order).map(pick =>\n                                            <p className=\"draft_pick\">\n                                                {pick.order !== undefined ?\n                                                    season + ' ' + round + '.' + pick.order.toLocaleString(\"en-US\", { minimumIntegerDigits: 2 })\n                                                    :\n                                                    season + ' Round ' + round\n                                                }&nbsp;\n                                                <span className=\"black\">\n                                                    <em style={{ filter: `invert(${(props.matchPick(season, round) / 200) + 50}%) brightness(2)` }}>\n                                                        {props.matchPick(season, round, (pick.order / pick.total_rosters))}\n                                                    </em>\n                                                </span>\n                                            </p>\n                                        )\n                                    )}\n                                </div>\n                            )}\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            : activeTab === 'Positions' && props.roster !== undefined ?\n                <div>\n                    <table className=\"rostercolumn\">\n                        <tbody>\n                            <tr>\n                                <th>Value</th>\n                                <th>QB</th>\n                                <th>Proj</th>\n                            </tr>\n                            {props.roster.players.filter(x => allPlayers[x].position === 'QB').sort((a, b) => parseInt(props.getValue(b)) - parseInt(props.getValue(a))).map((player, index) =>\n                                <tr key={index} className=\"roster_player\">\n                                    <td className=\"black\">\n                                        <em className=\"dv\" style={{ filter: `invert(${(props.getValue(player) / 200) + 50}%) brightness(2)` }}>\n                                            {props.getValue(player)}\n                                        </em>\n                                    </td>\n                                    <td>\n                                        <div className=\"roster_player\">\n                                            <img className=\"thumbnail\" alt=\"player\" src={`https://sleepercdn.com/content/nfl/players/thumb/${player}.jpg`} onError={(e) => { return e.target.src = emoji }} />\n                                            <p>\n                                                {allPlayers[player].position + \" \" + allPlayers[player].first_name + \" \" + allPlayers[player].last_name}&nbsp;\n                                                {allPlayers[player].team === null ? 'FA' : allPlayers[player].team}:&nbsp;\n                                            </p>\n                                        </div>\n                                    </td>\n                                    <td className=\"black\">\n                                        <em style={{ filter: `invert(${(props.getProjection(player) * 2) + 50}%) brightness(2)` }}>\n                                            {props.getProjection(player).toFixed(2)}\n                                        </em>\n                                    </td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </table>\n                    <table className=\"rostercolumn\">\n                        <tbody>\n                            <tr>\n                                <th>Value</th>\n                                <th>RB</th>\n                                <th>Proj</th>\n                            </tr>\n                            {props.roster.players.filter(x => allPlayers[x].position === 'RB').sort((a, b) => parseInt(props.getValue(b)) - parseInt(props.getValue(a))).map((player, index) =>\n                                <tr key={index} className=\"roster_player\">\n                                    <td className=\"black\">\n                                        <em className=\"dv\" style={{ filter: `invert(${(props.getValue(player) / 200) + 50}%) brightness(2)` }}>\n                                            {props.getValue(player)}\n                                        </em>\n                                    </td>\n                                    <td>\n                                        <div className=\"roster_player\">\n                                            <img className=\"thumbnail\" alt=\"player\" src={`https://sleepercdn.com/content/nfl/players/thumb/${player}.jpg`} onError={(e) => { return e.target.src = emoji }} />\n                                            <p>\n                                                {allPlayers[player].position + \" \" + allPlayers[player].first_name + \" \" + allPlayers[player].last_name}&nbsp;\n                                                {allPlayers[player].team === null ? 'FA' : allPlayers[player].team}:&nbsp;\n                                            </p>\n                                        </div>\n                                    </td>\n                                    <td className=\"black\">\n                                        <em style={{ filter: `invert(${(props.getProjection(player) * 2) + 50}%) brightness(2)` }}>\n                                            {props.getProjection(player).toFixed(2)}\n                                        </em>\n                                    </td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </table>\n                    <table className=\"rostercolumn\">\n                        <tbody>\n                            <tr>\n                                <th>Value</th>\n                                <th>WR</th>\n                                <th>Proj</th>\n                            </tr>\n                            {props.roster.players.filter(x => allPlayers[x].position === 'WR').sort((a, b) => parseInt(props.getValue(b)) - parseInt(props.getValue(a))).map((player, index) =>\n                                <tr key={index} className=\"roster_player\">\n                                    <td className=\"black\">\n                                        <em className=\"dv\" style={{ filter: `invert(${(props.getValue(player) / 200) + 50}%) brightness(2)` }}>\n                                            {props.getValue(player)}\n                                        </em>\n                                    </td>\n                                    <td>\n                                        <div className=\"roster_player\">\n                                            <img className=\"thumbnail\" alt=\"player\" src={`https://sleepercdn.com/content/nfl/players/thumb/${player}.jpg`} onError={(e) => { return e.target.src = emoji }} />\n                                            <p>\n                                                {allPlayers[player].position + \" \" + allPlayers[player].first_name + \" \" + allPlayers[player].last_name}&nbsp;\n                                                {allPlayers[player].team === null ? 'FA' : allPlayers[player].team}:&nbsp;\n                                            </p>\n                                        </div>\n                                    </td>\n                                    <td className=\"black\">\n                                        <em style={{ filter: `invert(${(props.getProjection(player) * 2) + 50}%) brightness(2)` }}>\n                                            {props.getProjection(player).toFixed(2)}\n                                        </em>\n                                    </td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </table>\n                    <table className=\"rostercolumn\">\n                        <tbody>\n                            <tr>\n                                <th>Value</th>\n                                <th>TE</th>\n                                <th>Proj</th>\n                            </tr>\n                            {props.roster.players.filter(x => allPlayers[x].position === 'TE').sort((a, b) => parseInt(props.getValue(b)) - parseInt(props.getValue(a))).map((player, index) =>\n                                <tr key={index} className=\"roster_player\">\n                                    <td className=\"black\">\n                                        <em className=\"dv\" style={{ filter: `invert(${(props.getValue(player) / 200) + 50}%) brightness(2)` }}>\n                                            {props.getValue(player)}\n                                        </em>\n                                    </td>\n                                    <td>\n                                        <div className=\"roster_player\">\n                                            <img className=\"thumbnail\" alt=\"player\" src={`https://sleepercdn.com/content/nfl/players/thumb/${player}.jpg`} onError={(e) => { return e.target.src = emoji }} />\n                                            <p>\n                                                {allPlayers[player].position + \" \" + allPlayers[player].first_name + \" \" + allPlayers[player].last_name}&nbsp;\n                                                {allPlayers[player].team === null ? 'FA' : allPlayers[player].team}:&nbsp;\n                                            </p>\n                                        </div>\n                                    </td>\n                                    <td className=\"black\">\n                                        <em style={{ filter: `invert(${(props.getProjection(player) * 2) + 50}%) brightness(2)` }}>\n                                            {props.getProjection(player).toFixed(2)}\n                                        </em>\n                                    </td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </table>\n                </div>\n                : null\n        }\n    </>\n}\nexport default Roster;\n","/Users/dev/react/DynastyDashboard2/client/src/components/playerShares.js",["169","170"],[],"import React, { useState, useMemo } from \"react\";\nimport emoji from '../emoji.png';\nimport Roster from \"./roster\";\nimport { motion } from 'framer-motion';\n\nconst PlayerShares = (props) => {\n    const [allPlayers, setAllPlayers] = useState(props.allPlayers)\n    const [players, setPlayers] = useState([])\n    const [sortBy, setSortBy] = useState('count')\n    const [activeTab, setActiveTab] = useState('Owned')\n    const [filters, setFilters] = useState({\n        'r_d': 'All',\n        'b_s': 'All',\n        positions: [],\n        types: []\n    })\n\n\n\n    const showLeagues = (player_id) => {\n        let p = players\n        p.filter(x => x.id === player_id).map(player => {\n            return player.isLeaguesHidden = !player.isLeaguesHidden\n        })\n        setPlayers([...p])\n    }\n    const showRoster = (player_id, league_id, owned = true) => {\n        let p = players\n        if (owned) {\n            p.filter(x => x.id === player_id).map(player => {\n                return player.leagues.filter(x => x.league_id === league_id).map(league => {\n                    return league.isRosterHidden = league.isRosterHidden === undefined ? false : !league.isRosterHidden\n                })\n            })\n        } else {\n            p.filter(x => x.id === player_id).map(player => {\n                return player.leagues_taken.filter(x => x.league_id === league_id).map(league => {\n                    return league.isRosterHidden = league.isRosterHidden === undefined ? false : !league.isRosterHidden\n                })\n            })\n        }\n\n        setPlayers([...p])\n    }\n    const findOccurences = (players) => {\n        const playersOccurences = []\n        players.forEach(p => {\n            const index = playersOccurences.findIndex(obj => {\n                return obj.id === p.id\n            })\n            if (index === -1) {\n                playersOccurences.push({\n                    id: p.id,\n                    dv: props.getValue(p.id),\n                    projection: props.getProjection(p.id).toFixed(2),\n                    count: 1,\n                    yearsExp: allPlayers[p.id].years_exp,\n                    leagues: [p.league],\n                    wins: p.wins,\n                    losses: p.losses,\n                    ties: p.ties,\n                    winpct: p.wins + p.losses > 0 ? p.wins / (p.wins + p.losses) : 0,\n                    fpts: p.fpts === null ? 0 : p.fpts,\n                    fpts_against: p.fpts_against === null ? 0 : p.fpts_against,\n                    sortName: allPlayers[p.id].last_name + \" \" + allPlayers[p.id].first_name + \" \" + allPlayers[p.id].position + \" \" + allPlayers[p.id].team,\n                    isLeaguesHidden: true,\n                    isPlayerHidden: false\n\n                })\n            } else {\n                playersOccurences[index].count++\n                playersOccurences[index].leagues.push(p.league)\n                playersOccurences[index].wins = playersOccurences[index].wins + p.wins\n                playersOccurences[index].losses = playersOccurences[index].losses + p.losses\n                playersOccurences[index].ties = playersOccurences[index].ties + p.ties\n                playersOccurences[index].winpct = (playersOccurences[index].wins + playersOccurences[index].losses + p.wins + p.losses) > 0 ?\n                    (playersOccurences[index].wins + p.wins) / (playersOccurences[index].wins + playersOccurences[index].losses + p.wins + p.losses) : 0\n                playersOccurences[index].fpts = playersOccurences[index].fpts + p.fpts\n                playersOccurences[index].fpts_against = playersOccurences[index].fpts_against + p.fpts_against\n\n            }\n        })\n        return playersOccurences\n    }\n    const filterPosition = (e) => {\n        let f = filters.positions\n        if (e.target.checked) {\n            const index = f.indexOf(e.target.name)\n            f.splice(index, 1)\n        } else {\n            f.push(e.target.name)\n        }\n        setFilters({ ...filters, positions: f })\n    }\n    const filterYearsExp = (e) => {\n        let f = filters.types\n        if (e.target.checked) {\n            const index = f.indexOf(e.target.name)\n            f.splice(index, 1)\n        } else {\n            f.push(e.target.name)\n        }\n        setFilters({ ...filters, types: f })\n    }\n\n    const getPlayers = (leagues) => {\n        let players = leagues.filter(x => x.isLeagueHidden === false && x.userRoster.players !== null).map(league => {\n            return league.userRoster.players.map(player => {\n                return {\n                    id: player,\n                    league: league,\n                    wins: league.wins,\n                    losses: league.losses,\n                    ties: league.ties,\n                    fpts: league.fpts,\n                    fpts_against: league.fpts_against\n                }\n            })\n        }).flat()\n        players = findOccurences(players)\n\n        let playersAll = leagues.filter(x => x.isLeagueHidden === false).map(league => {\n            return league.rosters.filter(x => x.players !== null && x.owner_id !== props.user.user_id).map(roster => {\n                return roster.players.map(player => {\n                    return {\n                        id: player,\n                        league: {\n                            ...league,\n                            roster: roster\n                        },\n                        rosters: league.rosters,\n                        fpts: 0,\n                        fpts_against: 0,\n                        wins: 0,\n                        losses: 0,\n                        ties: 0,\n                        winpct: 0\n                    }\n                })\n            })\n        }).flat(2)\n\n\n        players = players.map(player => {\n            let leagues_unowned = playersAll.filter(x => x.id === player.id).map(league_uo => {\n                return league_uo.league\n            })\n            return {\n                ...player,\n                leagues: player.leagues,\n                leagues_taken: leagues_unowned,\n                leagues_available: leagues.filter(x =>\n                    player.leagues.find(y => y.league_id === x.league_id) === undefined &&\n                    leagues_unowned.find(y => y.league_id === x.league_id) === undefined)\n            }\n        })\n        playersAll = findOccurences(playersAll)\n        playersAll = playersAll.map(playerAll => {\n            return {\n                ...playerAll,\n                count: 0,\n                leagues: [],\n                leagues_taken: playerAll.leagues,\n                leagues_available: leagues.filter(x =>\n                    playerAll.leagues.find(y => y.league_id === x.league_id) === undefined)\n\n            }\n        })\n        const x = Object.keys(allPlayers).filter(x => allPlayers[x].status === 'Active' && x === x.trim()).map(allPlayer => {\n            return {\n                id: allPlayer,\n                count: 0,\n                leagues: [],\n                leagues_taken: [],\n                leagues_available: leagues,\n                fpts: 0,\n                fpts_against: 0,\n                wins: 0,\n                losses: 0,\n                ties: 0,\n                winpct: 0,\n                isPlayerHidden: false,\n                isLeaguesHidden: true\n            }\n        })\n        return [\n            ...players,\n            ...playersAll.filter(x => players.find(y => y.id === x.id) === undefined),\n            ...x.filter(x => players.find(y => x.id === y.id) === undefined && playersAll.find(y => x.id === y.id) === undefined)\n        ]\n\n    }\n    const p = useMemo(() => getPlayers(props.leagues), [props.leagues, filters])\n    if (players !== p) {\n        setPlayers(p)\n\n    }\n\n\n\n    return <>\n        <h2>Player Shares</h2>\n        <div className=\"checkboxes\">\n            <label className=\"script\">\n                QB\n                <input className=\"clickable\" name=\"QB\" onClick={filterPosition} defaultChecked type=\"checkbox\" />\n            </label>\n            <label className=\"script\">\n                RB\n                <input className=\"clickable\" name=\"RB\" onChange={filterPosition} defaultChecked type=\"checkbox\" />\n            </label>\n            <label className=\"script\">\n                WR\n                <input className=\"clickable\" name=\"WR\" onChange={filterPosition} defaultChecked type=\"checkbox\" />\n            </label>\n            <label className=\"script\">\n                TE\n                <input className=\"clickable\" name=\"TE\" onChange={filterPosition} defaultChecked type=\"checkbox\" />\n            </label>\n            <br />\n            <label className='script'>\n                Vets\n                <input className=\"clickable\" name='V' onChange={(e) => filterYearsExp(e, 'Vets')} defaultChecked type=\"checkbox\" />\n            </label>\n            <label className='script'>\n                Rookies\n                <input className=\"clickable\" name='R' onChange={(e) => filterYearsExp(e, 'Rookies')} defaultChecked type=\"checkbox\" />\n            </label>\n        </div>\n        <table className=\"main\">\n            <tbody>\n                <tr>\n                    <th className=\"clickable\" onClick={() => setSortBy('count')}>Count</th>\n                    <th colSpan={4}>Player</th>\n                    <th className=\"clickable\" onClick={() => setSortBy('dv')}>Value</th>\n                    <th>Age</th>\n                    <th>Yrs Exp</th>\n                    <th colSpan={2} className=\"clickable\" onClick={() => setSortBy('winpct')}>Record</th>\n                    <th colSpan={2}>Fantasy Points</th>\n                    <th colSpan={2} className=\"clickable\" onClick={() => setSortBy('projection')}>Projection</th>\n                </tr>\n\n                {players.filter(x => !filters.types.includes(allPlayers[x.id].type) && !filters.positions.includes(allPlayers[x.id].position)).sort((a, b) => b[sortBy] - a[sortBy]).slice(0, players.filter(x => x.count > 0).length).map((player, index) =>\n                    <React.Fragment key={index}>\n                        <tr className={player.isLeaguesHidden ? 'hover clickable' : 'hover clickable active'} onClick={() => showLeagues(player.id)}>\n                            <td >{player.count}</td>\n                            <td>\n                                <motion.img\n                                    animate={{ rotate: 360 }}\n                                    transition={{ repeat: Infinity, duration: Math.random() * 10 + 2 }}\n                                    className='thumbnail'\n                                    alt={player.id}\n                                    src={`https://sleepercdn.com/content/nfl/players/thumb/${player.id}.jpg`}\n                                    onError={(e) => { return e.target.src = emoji }} />\n                            </td>\n                            <td colSpan={3}>{allPlayers[player.id].first_name + \" \" + allPlayers[player.id].last_name}</td>\n                            <td>\n                                <em style={{ filter: `invert(${(props.getValue(player.id) / 200) + 50}%) brightness(2)` }}>\n                                    {props.getValue(player.id)}\n                                </em>\n                            </td>\n                            <td>{allPlayers[player.id].age}</td>\n                            <td>{player.yearsExp}</td>\n                            <td colSpan={2}>{player.wins}-{player.losses}{player.ties > 0 ? `-${player.ties}` : null} <em>{player.winpct.toFixed(4)}</em></td>\n                            <td colSpan={2}>{player.fpts}</td>\n                            <td colSpan={2}>{player.projection}</td>\n                        </tr>\n                        {player.isLeaguesHidden === true ? null :\n                            <tr className=\"black\">\n                                <td colSpan={14}>\n                                    <button className={activeTab === 'Owned' ? \"player_leagues active clickable\" : \"player_leagues clickable\"} onClick={() => setActiveTab('Owned')}>Owned</button>\n                                    <button className={activeTab === 'Taken' ? \"player_leagues active clickable\" : \"player_leagues clickable\"} onClick={() => setActiveTab('Taken')}>Taken</button>\n                                    <button className={activeTab === 'Available' ? \"player_leagues active clickable\" : \"player_leagues clickable\"} onClick={() => setActiveTab('Available')}>Available</button>\n                                    {activeTab === 'Owned' ?\n                                        <table className=\"secondary\">\n                                            <tbody>\n                                                <tr>\n                                                    <th colSpan={6}>League</th>\n                                                    <th colSpan={2}>Status</th>\n                                                    <th colSpan={2}>Record</th>\n                                                    <th colSpan={3}>Points</th>\n                                                    <th colSpan={3}>Against</th>\n                                                </tr>\n\n                                                {player.leagues.sort((a, b) => a.index - b.index).map((league, index) =>\n                                                    <React.Fragment key={index}>\n                                                        <tr onClick={() => showRoster(player.id, league.league_id)} className={league.isRosterHidden === true ? 'hover_black clickable' : 'hover_black clickable active'}>\n                                                            <td>\n                                                                <motion.img\n                                                                    animate={{ rotate: 360 }}\n                                                                    transition={{\n                                                                        repeat: Infinity,\n                                                                        duration: Math.random() * 10 + 2\n\n                                                                    }}\n                                                                    className=\"thumbnail\"\n                                                                    src={league.avatar === null ? emoji : `https://sleepercdn.com/avatars/${league.avatar}`}\n                                                                />\n                                                            </td>\n                                                            <td className=\"left\" colSpan={5}>{league.name}</td>\n                                                            <td colSpan={2}>\n                                                                {league.starters.includes(player.id) ? 'Starter' :\n                                                                    league.taxi.includes(player.id) ? 'Taxi' :\n                                                                        league.reserve.includes(player.id) ? 'IR' : 'Bench'\n                                                                }\n                                                            </td>\n                                                            <td colSpan={2}>{league.wins}-{league.losses}{league.ties > 0 ? `-${league.ties}` : null}</td>\n                                                            <td colSpan={3}>{league.fpts === null ? 0 : Number(league.fpts.toFixed(2)).toLocaleString(\"en-US\")}</td>\n                                                            <td colSpan={3}>{league.fpts === null ? 0 : Number(league.fpts_against.toFixed(2)).toLocaleString(\"en-US\")}</td>\n                                                        </tr>\n                                                        {league.isRosterHidden === undefined || league.isRosterHidden === true ? null :\n                                                            <tr className='tertiary'>\n                                                                <td colSpan={16}>\n                                                                    {league.rosters.find(x => x.players.includes(player.id)) === undefined ? null :\n                                                                        <Roster\n                                                                            roster={{\n                                                                                ...league.rosters.find(x => x.players.includes(player.id)),\n                                                                                settings: {\n                                                                                    taxi_slots: league.settings.taxi_slots,\n                                                                                    reserve_slots: league.settings.reserve_slots\n                                                                                }\n                                                                            }}\n                                                                            getValue={props.getValue}\n                                                                            matchPick={props.matchPick}\n                                                                            getProjection={props.getProjection}\n                                                                            allPlayers={props.allPlayers}\n                                                                        />\n                                                                    }\n                                                                </td>\n                                                            </tr>\n                                                        }\n                                                    </React.Fragment>\n                                                )}\n                                            </tbody>\n                                        </table>\n                                        :\n                                        activeTab === 'Taken' ?\n                                            <table className=\"secondary >\">\n                                                <tbody>\n                                                    <tr>\n                                                        <th colSpan={7}>League</th>\n                                                        <th colSpan={4}>Owner</th>\n                                                        <th colSpan={2}>Status</th>\n                                                        <th colSpan={3}>Record</th>\n                                                        <th colSpan={3}>Points</th>\n                                                        <th colSpan={3}>Against</th>\n                                                    </tr>\n                                                    {player.leagues_taken.sort((a, b) => a.index - b.index).map((league, index) =>\n                                                        <React.Fragment key={index}>\n                                                            <tr className={league.isRosterHidden === true ? 'hover_black clickable' : 'hover_black active clickable'} onClick={() => showRoster(player.id, league.league_id, false)} >\n                                                                <td colSpan={2}>\n                                                                    <motion.img\n                                                                        animate={{ rotate: 360 }}\n                                                                        transition={{\n                                                                            repeat: Infinity,\n                                                                            duration: Math.random() * 10 + 2\n                                                                        }}\n                                                                        alt='avatar'\n                                                                        className='thumbnail'\n                                                                        src={league.avatar === null ? emoji : `https://sleepercdn.com/avatars/${league.avatar}`}\n                                                                    />\n                                                                </td>\n                                                                <td colSpan={5}>{league.name}</td>\n                                                                <td colSpan={4}>{league.roster.username}</td>\n                                                                <td colSpan={2}>\n                                                                    {league.roster.starters.includes(player.id) ? 'Starter' :\n                                                                        league.roster.taxi !== null && league.roster.taxi.includes(player.id) ? 'Taxi' :\n                                                                            league.roster.reserve !== null && league.roster.reserve.includes(player.id) ? 'IR' : 'Bench'\n                                                                    }\n                                                                </td>\n                                                                <td colSpan={3}>{league.wins}-{league.losses}{league.ties > 0 ? `-${league.ties}` : null}</td>\n                                                                <td colSpan={3}>{league.fpts === null ? 0 : Number(league.fpts.toFixed(2)).toLocaleString(\"en-US\")}</td>\n                                                                <td colSpan={3}>{league.fpts_against === null ? 0 : Number(league.fpts_against.toFixed(2)).toLocaleString(\"en-US\")}</td>\n                                                            </tr>\n                                                            {league.isRosterHidden === undefined || league.isRosterHidden === true ? null :\n                                                                <tr className=\"tertiary\">\n                                                                    <td colSpan={11}>\n                                                                        <Roster\n                                                                            roster={{\n                                                                                ...league.rosters.find(x => x.players.includes(player.id)),\n                                                                                settings: {\n                                                                                    taxi_slots: league.settings.taxi_slots,\n                                                                                    reserve_slots: league.settings.reserve_slots\n                                                                                }\n                                                                            }}\n                                                                            getValue={props.getValue}\n                                                                            matchPick={props.matchPick}\n                                                                            getProjection={props.getProjection}\n                                                                            allPlayers={props.allPlayers}\n                                                                        />\n                                                                    </td>\n                                                                    <td colSpan={11}>\n                                                                        <Roster\n                                                                            roster={{\n                                                                                ...league.userRoster,\n                                                                                settings: {\n                                                                                    taxi_slots: league.settings.taxi_slots,\n                                                                                    reserve_slots: league.settings.reserve_slots\n                                                                                }\n                                                                            }}\n                                                                            getValue={props.getValue}\n                                                                            matchPick={props.matchPick}\n                                                                            getProjection={props.getProjection}\n                                                                            allPlayers={props.allPlayers}\n                                                                        />\n                                                                    </td>\n                                                                </tr>\n                                                            }\n                                                        </React.Fragment>\n                                                    )}\n                                                </tbody>\n                                            </table>\n                                            :\n                                            <table className=\"secondary\">\n                                                <tbody>\n                                                    <tr>\n                                                        <th colSpan={16}>League</th>\n                                                    </tr>\n                                                    {player.leagues_available.sort((a, b) => a.index - b.index).map((league, index) =>\n                                                        <tr key={index}>\n                                                            <td colSpan={1}><img className='thumbnail' alt={league.avatar} src={league.avatar === null ? emoji : `https://sleepercdn.com/avatars/${league.avatar}`} /></td>\n                                                            <td colSpan={15} className=\"left\">{league.name}</td>\n                                                        </tr>\n                                                    )}\n                                                </tbody>\n                                            </table>\n                                    }\n                                </td>\n                            </tr>\n                        }\n                    </React.Fragment>\n                )}\n            </tbody>\n        </table>\n    </>\n}\nexport default PlayerShares;","/Users/dev/react/DynastyDashboard2/client/src/components/leaguemates.js",["171","172"],[],"import React, { useState, useMemo } from \"react\";\nimport emoji from '../emoji.png';\nimport { motion } from \"framer-motion\";\nimport Roster from \"./roster\";\nimport SearchLeaguemate from './searchLeaguemate';\n\nconst Leaguemates = (props) => {\n    const [lm, setLm] = useState([])\n\n    const findOccurencesLeaguemates = (leaguemates) => {\n        const lmOcurrences = []\n        leaguemates.forEach(lm => {\n            const index = lmOcurrences.findIndex(obj => {\n                return obj.id === lm.owner_id\n            })\n            if (index === -1) {\n                lmOcurrences.push({\n                    id: lm.owner_id,\n                    username: lm.username,\n                    isLeaguemateHidden: false,\n                    count: 1,\n                    avatar: lm.avatar,\n                    isLeaguesHidden: true,\n                    leagues: [{\n                        league_id: lm.league_id,\n                        name: lm.league_name,\n                        userWins: lm.userWins,\n                        userLosses: lm.userLosses,\n                        userTies: lm.userTies,\n                        avatar: lm.league_avatar,\n                        wins: lm.settings.wins,\n                        losses: lm.settings.losses,\n                        ties: lm.settings.ties,\n                        isRostersHidden: true,\n                        lmRoster: lm,\n                        userRoster: lm.userRoster,\n                        isRostersHidden: true\n                    }],\n                    userWins: lm.userWins,\n                    userLosses: lm.userLosses,\n                    userTies: lm.userTies,\n                    wins: lm.settings.wins,\n                    losses: lm.settings.losses,\n                    ties: lm.settings.ties,\n                })\n            } else {\n                lmOcurrences[index].leagues.push({\n                    league_id: lm.league_id,\n                    name: lm.league_name,\n                    userWins: lm.userWins,\n                    userLosses: lm.userLosses,\n                    userTies: lm.userTies,\n                    avatar: lm.league_avatar,\n                    wins: lm.settings.wins,\n                    losses: lm.settings.losses,\n                    ties: lm.settings.ties,\n                    userRoster: lm.userRoster,\n                    lmRoster: lm,\n                    isRostersHidden: true\n                })\n                lmOcurrences[index].count++\n                lmOcurrences[index].userWins = lmOcurrences[index].userWins + lm.userWins\n                lmOcurrences[index].userLosses = lmOcurrences[index].userLosses + lm.userLosses\n                lmOcurrences[index].userTies = lmOcurrences[index].userTies + lm.userTies\n                lmOcurrences[index].wins = lmOcurrences[index].wins + lm.settings.wins\n                lmOcurrences[index].losses = lmOcurrences[index].losses + lm.settings.losses\n                lmOcurrences[index].ties = lmOcurrences[index].ties + lm.settings.ties\n            }\n        })\n        return lmOcurrences.sort((a, b) => a.leagues.length - b.leagues.length)\n    }\n\n    const getLeaguemates = (leagues) => {\n        let leaguemates = props.leagues.filter(x => x.isLeagueHidden === false).map(league => {\n            return league.rosters.map(roster => {\n                return {\n                    ...roster,\n                    username: roster.username,\n                    avatar: roster.avatar,\n                    league_avatar: league.avatar,\n                    league_name: league.name,\n                    league_id: league.league_id,\n                    reserve_slots: league.reserve_slots,\n                    taxi_slots: league.taxi_slots,\n                    userWins: league.wins,\n                    userLosses: league.losses,\n                    userTies: league.ties,\n                    userRoster: {\n                        ...league.userRoster,\n                        players: league.userRoster.players === undefined ? [] : league.userRoster.players,\n                        taxi: league.userRoster.taxi === undefined ? [] : league.userRoster.taxi,\n                        reserve: league.userRoster.reserve === undefined ? [] : league.userRoster.reserve,\n                        taxi_slots: league.taxi_slots,\n                        reserve_slots: league.reserve_slots\n                    }\n                }\n            })\n        }).flat()\n        leaguemates = findOccurencesLeaguemates(leaguemates)\n        return leaguemates\n    }\n    const leaguemates = useMemo(() => getLeaguemates(props.leagues), [props.leagues])\n    if (leaguemates !== lm) setLm(leaguemates)\n\n    const showLeagues = (leaguemate_id) => {\n        let leaguemates = lm\n        leaguemates.filter(x => x.id === leaguemate_id).map(leaguemate => {\n            return leaguemate.isLeaguesHidden = !leaguemate.isLeaguesHidden\n        })\n        setLm([...leaguemates])\n    }\n    const showRoster = (leaguemate_id, league_id) => {\n        let leaguemates = lm\n        leaguemates.find(x => x.id === leaguemate_id).leagues.find(x => x.league_id === league_id).isRostersHidden =\n            !leaguemates.find(x => x.id === leaguemate_id).leagues.find(x => x.league_id === league_id).isRostersHidden\n        setLm([...leaguemates])\n    }\n    const getLeaguemate = (data) => {\n        const leaguemates = lm\n        if (data) {\n            leaguemates.map(leaguemate => {\n                return leaguemate.isLeaguemateHidden = true\n            })\n            leaguemates.filter(x => x.username === data).map(leaguemate => {\n                return leaguemate.isLeaguemateHidden = false\n            })\n        } else {\n            leaguemates.map(leaguemate => {\n                return leaguemate.isLeaguemateHidden = false\n            })\n        }\n        setLm([...leaguemates])\n    }\n    return <>\n        <SearchLeaguemate \n            sendLeaguemate={getLeaguemate} \n            leaguemates={\n                leaguemates.map(leaguemate => leaguemate.username)\n            }\n        />\n        <h2>{lm.length} Leaguemates</h2>\n\n        <table className=\"main\">\n            <tbody>\n                <tr>\n                    <th colSpan={5}></th>\n                    <th colSpan={4}>Leaguemate</th>\n                    <th colSpan={4}>{props.user.display_name}</th>\n                </tr>\n                <tr>\n                    <th colSpan={4}></th>\n                    <th colSpan={1}>Count</th>\n                    <th colSpan={2}>Record</th>\n                    <th colSpan={2}>WinPct</th>\n                    <th colSpan={2}>Record</th>\n                    <th colSpan={2}>WinPct</th>\n                </tr>\n                {lm.filter(x => x.isLeaguemateHidden === false).sort((a, b) => b.count - a.count).slice(0, 100).map((leaguemate, index) =>\n                    <React.Fragment key={index}>\n                        <tr\n                            className={leaguemate.isLeaguesHidden ? 'hover clickable' : 'hover clickable active'}\n                            onClick={() => showLeagues(leaguemate.id)}\n                        >\n                            <td>\n                                <motion.img\n                                    animate={{ rotate: 360 }}\n                                    transition={{ repeat: Infinity, duration: Math.random() * 5 + 3 }}\n                                    className='thumbnail'\n                                    src={leaguemate.avatar === null ? emoji : `https://sleepercdn.com/avatars/${leaguemate.avatar}`}\n                                />\n                            </td>\n                            <td colSpan={3} className=\"left\">{leaguemate.username}</td>\n                            <td colSpan={1}>{leaguemate.count}</td>\n                            <td colSpan={2}>{leaguemate.wins}-{leaguemate.losses}{leaguemate.ties > 0 ? `-${leaguemate.ties}` : null}</td>\n                            <td colSpan={2}>{leaguemate.wins + leaguemate.losses > 0 ? Number(leaguemate.wins / (leaguemate.wins + leaguemate.losses)).toFixed(4).toLocaleString(\"en-US\") : '.0000'}</td>\n                            <td colSpan={2}>{leaguemate.userWins}-{leaguemate.userLosses}{leaguemate.userTies > 0 ? `-${leaguemate.userTies}` : null}</td>\n                            <td colSpan={2}>{leaguemate.userWins + leaguemate.userLosses > 0 ? Number(leaguemate.userWins / (leaguemate.userWins + leaguemate.userLosses)).toFixed(4).toLocaleString(\"en-US\") : '.0000'}</td>\n                        </tr>\n                        {leaguemate.isLeaguesHidden === true ? null :\n                            <tr>\n                                <td colSpan={13}>\n                                    <table className=\"secondary\">\n                                        <tbody>\n                                            <tr>\n                                                <th colSpan={2}>{leaguemate.username}</th>\n                                                <th colSpan={2}></th>\n                                                <th colSpan={2}>{props.user.display_name}</th>\n                                            </tr>\n                                            <tr>\n                                                <th>Record</th>\n                                                <th>WinPct</th>\n                                                <th colSpan={2}></th>\n                                                <th>Record</th>\n                                                <th>WinPct</th>\n                                            </tr>\n                                            {leaguemate.leagues.map((league, index) =>\n                                                <React.Fragment key={index}>\n                                                    <tr key={index} className={league.isRostersHidden ? 'hover_black clickable' : 'hover_black active clickable'} onClick={() => showRoster(leaguemate.id, league.league_id)}>\n                                                        <td>{league.wins}-{league.losses}{league.ties > 0 ? `-${league.ties}` : null}</td>\n                                                        <td>{league.wins + league.losses > 0 ? Number(league.wins / (league.losses + league.wins)).toFixed(4).toLocaleString(\"en-US\") : '.0000'}</td>\n                                                        <td colSpan={2}>\n                                                            <div className='leaguewrapper'>\n                                                                <img className='thumbnail' alt={league.name} src={league.avatar === null ? emoji : `https://sleepercdn.com/avatars/${league.avatar}`} />\n                                                                <p>{league.name}</p>\n                                                            </div>\n                                                        </td>\n                                                        <td>{league.userWins}-{league.userLosses}{league.userTies > 0 ? `-${league.ties}` : null}</td>\n                                                        <td>{league.userWins + league.userLosses > 0 ? Number(league.userWins / (league.userLosses + league.userWins)).toFixed(4).toLocaleString(\"en-US\") : '.0000'}</td>\n                                                    </tr>\n                                                    {league.isRostersHidden ? null :\n                                                        <tr className=\"tertiary\">\n                                                            <td colSpan={3}>\n                                                                <Roster\n                                                                    roster={{\n                                                                        ...league.lmRoster,\n                                                                        settings: {\n                                                                            ...league.lmRoster.settings,\n                                                                            taxi_slots: league.lmRoster.taxi_slots,\n                                                                            reserve_slots: league.lmRoster.reserve_slots\n                                                                        }\n                                                                    }}\n                                                                    allPlayers={props.allPlayers}\n                                                                    getProjection={props.getProjection}\n                                                                    getValue={props.getValue}\n                                                                    matchPick={props.matchPick}\n                                                                />\n                                                            </td>\n                                                            <td colSpan={3}>\n                                                                <Roster\n                                                                    roster={{\n                                                                        ...league.userRoster,\n                                                                        settings: {\n                                                                            ...league.userRoster.settings,\n                                                                            taxi_slots: league.userRoster.taxi_slots,\n                                                                            reserve_slots: league.userRoster.reserve_slots\n                                                                        }\n                                                                    }}\n                                                                    allPlayers={props.allPlayers}\n                                                                    getProjection={props.getProjection}\n                                                                    getValue={props.getValue}\n                                                                    matchPick={props.matchPick}\n                                                                />\n                                                            </td>\n                                                        </tr>\n                                                    }\n                                                </React.Fragment>\n                                            )}\n                                        </tbody>\n                                    </table>\n                                </td>\n                            </tr>\n                        }\n                    </React.Fragment>\n                )}\n            </tbody>\n        </table>\n    </>\n}\nexport default Leaguemates;","/Users/dev/react/DynastyDashboard2/client/src/components/searchPlayer.js",["173"],[],"/Users/dev/react/DynastyDashboard2/client/src/components/searchLeaguemate.js",["174"],[],"import { useState, useEffect } from 'react';\nimport './searchPlayer.css';\n\nconst SearchPlayer = (props) => {\n    const [leaguematesList, setLeaguematesList] = useState([])\n    const [leaguemateSearched, setLeaguemateSearched] = useState(null)\n\n    const getLeaguemates = (leaguemates) => {\n        setLeaguematesList(leaguemates)\n    }\n    const filterLeaguemates = (e) => {\n        const leaguemate = leaguematesList.find(x => x === e.target.value)\n        setLeaguemateSearched(leaguemate)\n    }\n    const handleClear = () => {\n        let leaguemate = null\n        setLeaguemateSearched(leaguemate)\n    }\n\n    useEffect(() => {\n        getLeaguemates(props.leaguemates)\n        props.sendLeaguemate(leaguemateSearched)\n    }, [leaguemateSearched])\n\n    return <>\n        <h5>\n            <form onSelect={filterLeaguemates}>\n                <input list=\"leaguemates\" placeholder=\"Search Leaguemate\" type=\"text\" />\n                <datalist id=\"leaguemates\">\n                    {leaguematesList.sort((a, b) => a > b ? 1 : -1).map(leaguemate =>\n                        <option>{leaguemate}</option>\n                    )}\n                </datalist>\n                <button onClick={handleClear} type=\"reset\">Clear</button>\n            </form>\n        </h5>\n    </>\n}\n\nexport default SearchPlayer;","/Users/dev/react/DynastyDashboard2/client/src/components/sliderToggle.js",["175"],[],"import React, { useEffect, useState } from 'react';\n\n\nconst SliderToggle = (props) => {\n    const [selection, setSelection] = useState({ [props.name]: props.active })\n\n    const slide = (e) => {\n        setSelection({ [props.name]: e.target.name })\n    }\n\n    useEffect(() => {\n        props.sendSelection(selection)\n    }, [selection])\n\n    return <div className=\"slider\">\n        {props.names.map(name =>\n            <span key={name} id={name} className={selection[props.name] === name ? 'selected' : 'option'}>\n                <button className='clickable' name={name} onClick={slide}>{name}</button>\n            </span>\n        )}\n    </div>\n}\n\nexport default SliderToggle;","/Users/dev/react/ddtest/client/src/index.js",[],[],"/Users/dev/react/ddtest/client/src/App.js",[],[],"/Users/dev/react/ddtest/client/src/reportWebVitals.js",[],[],"/Users/dev/react/ddtest/client/src/components/homepage.js",["176"],[],"/Users/dev/react/ddtest/client/src/components/view.js",["177","178","179","180","181"],[],"/Users/dev/react/ddtest/client/src/components/leagues.js",["182"],[],"/Users/dev/react/ddtest/client/src/components/playerInfo.js",["183","184","185","186","187","188"],[],"/Users/dev/react/ddtest/client/src/components/playerShares.js",["189","190"],[],"/Users/dev/react/ddtest/client/src/components/sliderToggle.js",["191"],[],"/Users/dev/react/ddtest/client/src/components/leaguemates.js",["192","193"],[],"/Users/dev/react/ddtest/client/src/components/league.js",["194"],[],"/Users/dev/react/ddtest/client/src/components/roster.js",["195"],[],"/Users/dev/react/ddtest/client/src/components/searchLeaguemate.js",["196"],[],"/Users/dev/react/ddtest/client/src/components/searchPlayer.js",["197"],[],{"ruleId":"198","severity":1,"message":"199","line":1,"column":20,"nodeType":"200","messageId":"201","endLine":1,"endColumn":29},{"ruleId":"202","severity":1,"message":"203","line":27,"column":22,"nodeType":"204","messageId":"205","endLine":27,"endColumn":24},{"ruleId":"198","severity":1,"message":"206","line":51,"column":23,"nodeType":"200","messageId":"201","endLine":51,"endColumn":24},{"ruleId":"202","severity":1,"message":"203","line":51,"column":59,"nodeType":"204","messageId":"205","endLine":51,"endColumn":61},{"ruleId":"207","severity":1,"message":"208","line":132,"column":81,"nodeType":"209","messageId":"210","endLine":132,"endColumn":109},{"ruleId":"207","severity":1,"message":"208","line":133,"column":81,"nodeType":"209","messageId":"210","endLine":133,"endColumn":109},{"ruleId":"202","severity":1,"message":"203","line":62,"column":31,"nodeType":"204","messageId":"205","endLine":62,"endColumn":33},{"ruleId":"211","severity":1,"message":"212","line":77,"column":8,"nodeType":"213","endLine":77,"endColumn":26,"suggestions":"214"},{"ruleId":"202","severity":1,"message":"203","line":81,"column":54,"nodeType":"204","messageId":"205","endLine":81,"endColumn":56},{"ruleId":"202","severity":1,"message":"203","line":89,"column":54,"nodeType":"204","messageId":"205","endLine":89,"endColumn":56},{"ruleId":"202","severity":1,"message":"203","line":107,"column":33,"nodeType":"204","messageId":"205","endLine":107,"endColumn":35},{"ruleId":"215","severity":1,"message":"216","line":121,"column":35,"nodeType":"217","messageId":"218","endLine":121,"endColumn":46},{"ruleId":"202","severity":1,"message":"203","line":12,"column":61,"nodeType":"204","messageId":"205","endLine":12,"endColumn":63},{"ruleId":"198","severity":1,"message":"219","line":8,"column":24,"nodeType":"200","messageId":"201","endLine":8,"endColumn":37},{"ruleId":"198","severity":1,"message":"219","line":5,"column":24,"nodeType":"200","messageId":"201","endLine":5,"endColumn":37},{"ruleId":"198","severity":1,"message":"219","line":7,"column":24,"nodeType":"200","messageId":"201","endLine":7,"endColumn":37},{"ruleId":"211","severity":1,"message":"220","line":193,"column":56,"nodeType":"213","endLine":193,"endColumn":80,"suggestions":"221"},{"ruleId":"222","severity":1,"message":"223","line":37,"column":25,"nodeType":"224","messageId":"225","endLine":37,"endColumn":40},{"ruleId":"211","severity":1,"message":"226","line":102,"column":70,"nodeType":"213","endLine":102,"endColumn":85,"suggestions":"227"},{"ruleId":"211","severity":1,"message":"228","line":33,"column":8,"nodeType":"213","endLine":33,"endColumn":42,"suggestions":"229"},{"ruleId":"211","severity":1,"message":"228","line":23,"column":8,"nodeType":"213","endLine":23,"endColumn":28,"suggestions":"230"},{"ruleId":"211","severity":1,"message":"228","line":13,"column":8,"nodeType":"213","endLine":13,"endColumn":19,"suggestions":"231"},{"ruleId":"198","severity":1,"message":"199","line":1,"column":20,"nodeType":"200","messageId":"201","endLine":1,"endColumn":29},{"ruleId":"202","severity":1,"message":"203","line":27,"column":22,"nodeType":"204","messageId":"205","endLine":27,"endColumn":24},{"ruleId":"198","severity":1,"message":"206","line":51,"column":23,"nodeType":"200","messageId":"201","endLine":51,"endColumn":24},{"ruleId":"202","severity":1,"message":"203","line":51,"column":59,"nodeType":"204","messageId":"205","endLine":51,"endColumn":61},{"ruleId":"207","severity":1,"message":"208","line":132,"column":81,"nodeType":"209","messageId":"210","endLine":132,"endColumn":109},{"ruleId":"207","severity":1,"message":"208","line":133,"column":81,"nodeType":"209","messageId":"210","endLine":133,"endColumn":109},{"ruleId":"202","severity":1,"message":"203","line":12,"column":61,"nodeType":"204","messageId":"205","endLine":12,"endColumn":63},{"ruleId":"202","severity":1,"message":"203","line":62,"column":31,"nodeType":"204","messageId":"205","endLine":62,"endColumn":33},{"ruleId":"211","severity":1,"message":"212","line":77,"column":8,"nodeType":"213","endLine":77,"endColumn":26,"suggestions":"232"},{"ruleId":"202","severity":1,"message":"203","line":81,"column":54,"nodeType":"204","messageId":"205","endLine":81,"endColumn":56},{"ruleId":"202","severity":1,"message":"203","line":89,"column":54,"nodeType":"204","messageId":"205","endLine":89,"endColumn":56},{"ruleId":"202","severity":1,"message":"203","line":107,"column":33,"nodeType":"204","messageId":"205","endLine":107,"endColumn":35},{"ruleId":"215","severity":1,"message":"216","line":121,"column":35,"nodeType":"217","messageId":"218","endLine":121,"endColumn":46},{"ruleId":"198","severity":1,"message":"219","line":8,"column":24,"nodeType":"200","messageId":"201","endLine":8,"endColumn":37},{"ruleId":"211","severity":1,"message":"220","line":210,"column":56,"nodeType":"213","endLine":210,"endColumn":80,"suggestions":"233"},{"ruleId":"211","severity":1,"message":"228","line":13,"column":8,"nodeType":"213","endLine":13,"endColumn":19,"suggestions":"234"},{"ruleId":"222","severity":1,"message":"223","line":37,"column":25,"nodeType":"224","messageId":"225","endLine":37,"endColumn":40},{"ruleId":"211","severity":1,"message":"226","line":102,"column":70,"nodeType":"213","endLine":102,"endColumn":85,"suggestions":"235"},{"ruleId":"198","severity":1,"message":"219","line":8,"column":24,"nodeType":"200","messageId":"201","endLine":8,"endColumn":37},{"ruleId":"198","severity":1,"message":"219","line":5,"column":24,"nodeType":"200","messageId":"201","endLine":5,"endColumn":37},{"ruleId":"211","severity":1,"message":"228","line":23,"column":8,"nodeType":"213","endLine":23,"endColumn":28,"suggestions":"236"},{"ruleId":"211","severity":1,"message":"228","line":33,"column":8,"nodeType":"213","endLine":33,"endColumn":42,"suggestions":"237"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'a' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props' and 'sortBy'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["238"],"no-self-assign","'player.fpts' is assigned to itself.","MemberExpression","selfAssignment","'setAllPlayers' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'getPlayers'. Either include it or remove the dependency array.",["239"],"no-dupe-keys","Duplicate key 'isRostersHidden'.","ObjectExpression","unexpected","React Hook useMemo has a missing dependency: 'getLeaguemates'. Either include it or remove the dependency array.",["240"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["241"],["242"],["243"],["244"],["245"],["246"],["247"],["248"],["249"],{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"250","fix":"262"},{"desc":"252","fix":"263"},{"desc":"260","fix":"264"},{"desc":"254","fix":"265"},{"desc":"258","fix":"266"},{"desc":"256","fix":"267"},"Update the dependencies array to be: [props, props.allPlayers, sortBy]",{"range":"268","text":"269"},"Update the dependencies array to be: [getPlayers, props.leagues]",{"range":"270","text":"271"},"Update the dependencies array to be: [getLeaguemates, props.leagues]",{"range":"272","text":"273"},"Update the dependencies array to be: [playerSearched, props, props.allPlayers]",{"range":"274","text":"275"},"Update the dependencies array to be: [leaguemateSearched, props]",{"range":"276","text":"277"},"Update the dependencies array to be: [props, selection]",{"range":"278","text":"279"},{"range":"280","text":"269"},{"range":"281","text":"271"},{"range":"282","text":"279"},{"range":"283","text":"273"},{"range":"284","text":"277"},{"range":"285","text":"275"},[2322,2340],"[props, props.allPlayers, sortBy]",[7647,7671],"[getPlayers, props.leagues]",[4571,4586],"[getLeaguemates, props.leagues]",[1251,1285],"[playerSearched, props, props.allPlayers]",[729,749],"[leaguemateSearched, props]",[324,335],"[props, selection]",[2322,2340],[8175,8199],[324,335],[4571,4586],[729,749],[1251,1285]]